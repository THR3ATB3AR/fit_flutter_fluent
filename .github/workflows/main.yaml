name: Build FitFlutterFluent Releases

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Manual version (e.g., 1.2.3). If empty and not a tag, uses pubspec.yaml.'
        required: false
        default: ''

jobs:
  resolve-version:
    name: Resolve Application Version
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.determine_version.outputs.version_number }}
      build_number: ${{ steps.determine_version.outputs.build_suffix }}
    steps:
      - uses: actions/checkout@v4
      - name: Determine Version and Build Number
        id: determine_version
        run: |
          VERSION_NUMBER=""
          BUILD_SUFFIX="1" 

          SOURCE_VERSION_STRING=""
          if [[ "${{ github.event_name }}" == "push" && "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            TAG_NAME="${{ github.ref_name }}"
            SOURCE_VERSION_STRING="${TAG_NAME#v}" 
            echo "Using version from tag: $TAG_NAME"
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            SOURCE_VERSION_STRING="${{ github.event.inputs.version }}"
            echo "Using version from manual input: $SOURCE_VERSION_STRING"
          else
            echo "Reading version from pubspec.yaml"
            SOURCE_VERSION_STRING=$(grep '^version: ' pubspec.yaml | sed 's/version: //')
            SOURCE_VERSION_STRING=$(echo "$SOURCE_VERSION_STRING" | xargs) 
            echo "Using version from pubspec.yaml: $SOURCE_VERSION_STRING"
          fi

          if [[ "$SOURCE_VERSION_STRING" == *"+"* ]]; then
            PROVISIONAL_BUILD_SUFFIX="${SOURCE_VERSION_STRING#*+}"
            PROVISIONAL_BUILD_SUFFIX=$(echo "$PROVISIONAL_BUILD_SUFFIX" | xargs)
            if [[ -n "$PROVISIONAL_BUILD_SUFFIX" ]]; then
                BUILD_SUFFIX="$PROVISIONAL_BUILD_SUFFIX"
            fi
            VERSION_NUMBER="${SOURCE_VERSION_STRING%+*}"
          else
            VERSION_NUMBER="$SOURCE_VERSION_STRING"
          fi
          
          VERSION_NUMBER=$(echo "$VERSION_NUMBER" | xargs)

          if [[ -z "$VERSION_NUMBER" ]]; then
            echo "Error: Version number (app_version) could not be determined or is empty."
            exit 1
          fi
          if ! [[ "$VERSION_NUMBER" =~ ^[0-9]+\.[0-9]+\.[0-9]+([._-].+)?$ ]]; then
            if ! [[ "$VERSION_NUMBER" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "Warning: VERSION_NUMBER ('$VERSION_NUMBER') doesn't strictly follow X.Y.Z. Ensure it's compatible with build tools."
            fi
          fi

          if ! [[ "$BUILD_SUFFIX" =~ ^[1-9][0-9]*$ ]]; then
            echo "Warning: BUILD_SUFFIX ('$BUILD_SUFFIX') was empty, zero, non-numeric, or not a positive integer. Defaulting to 1."
            BUILD_SUFFIX="1"
          fi

          echo "Determined app_version: $VERSION_NUMBER"
          echo "Determined build_suffix (build_number): $BUILD_SUFFIX"

          echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT
          echo "build_suffix=$BUILD_SUFFIX" >> $GITHUB_OUTPUT

  build-windows:
    name: Build Windows Release
    runs-on: windows-latest
    needs: resolve-version
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
      - run: flutter pub get
      - name: Flutter Build Windows
        run: |
          flutter build windows --release --build-name=${{ needs.resolve-version.outputs.app_version }} 
          echo "Built with version: ${{ needs.resolve-version.outputs.app_version }}"
      - name: Prepare Windows Artifact
        run: |
          mkdir dist
          cp -r build/windows/x64/runner/Release dist/fitflutterfluent 
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fitflutterfluent-windows-unpacked
          path: dist/fitflutterfluent

  innosetup:
    name: Build Inno Setup Installer
    runs-on: windows-latest
    needs: [build-windows, resolve-version]
    env:
      APP_VERSION: ${{ needs.resolve-version.outputs.app_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Download Windows Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: fitflutterfluent-windows-unpacked
          path: build/windows/x64/runner/Release
      - name: Prepare Additional Files for Inno Setup
        run: |
          mkdir -p setup  
          echo "Listing contents of expected Inno Setup source directory:"
          ls -R build/windows/x64/runner/Release 
          echo "Listing contents of setup directory (if used):"
          ls -R setup 
        shell: bash
      - name: Install Inno Setup
        run: choco install innosetup --no-progress
      - name: Build Installer
        run: iscc /DMyAppVersion="${{ env.APP_VERSION }}" setupmaker.iss
      - name: List Installer Output
        run: ls -R Output 
        shell: bash
      - name: Upload InnoSetup Installer
        uses: actions/upload-artifact@v4
        with:
          name: fitflutterfluent-windows-setup
          path: Output/fit-flutter-setup-win64-${{ env.APP_VERSION }}.exe

  build-linux:
    name: Build Linux Release
    runs-on: ubuntu-latest
    needs: resolve-version
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
      - run: sudo apt-get update
      - run: sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev
      - run: flutter pub get
      - name: Flutter Build Linux
        run: |
          flutter build linux --release --build-name=${{ needs.resolve-version.outputs.app_version }} 
      - name: Prepare Linux Artifact
        run: |
          mkdir -p dist/fitflutterfluent
          cp -r build/linux/x64/release/bundle/* dist/fitflutterfluent/
          cd dist && tar -czf fitflutterfluent-linux-${{ needs.resolve-version.outputs.app_version }}.tar.gz fitflutterfluent
      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fitflutterfluent-linux
          path: dist/fitflutterfluent-linux-${{ needs.resolve-version.outputs.app_version }}.tar.gz


  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: resolve-version
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
      - run: flutter pub get
      - name: Flutter Build Android
        run: |
          flutter build apk --release --build-name=${{ needs.resolve-version.outputs.app_version }}
      - name: Rename Android APK
        run: |
          mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/fitflutterfluent-android-${{ needs.resolve-version.outputs.app_version }}.apk
          echo "Renamed APK to fitflutterfluent-android-${{ needs.resolve-version.outputs.app_version }}.apk"
      - name: Upload Android Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fitflutterfluent-android # This name determines the sub-directory when downloaded
          path: build/app/outputs/flutter-apk/fitflutterfluent-android-${{ needs.resolve-version.outputs.app_version }}.apk

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [resolve-version, build-windows, innosetup, build-linux, build-android]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded files # For debugging
        run: |
          echo "--- Listing root of workspace ---"
          ls -lA
          echo "--- Listing contents of downloaded artifact directories ---"
          if [ -d "fitflutterfluent-windows-unpacked" ]; then echo "--- fitflutterfluent-windows-unpacked ---"; ls -lA fitflutterfluent-windows-unpacked/; fi
          if [ -d "fitflutterfluent-windows-setup" ]; then echo "--- fitflutterfluent-windows-setup ---"; ls -lA fitflutterfluent-windows-setup/; fi
          if [ -d "fitflutterfluent-linux" ]; then echo "--- fitflutterfluent-linux ---"; ls -lA fitflutterfluent-linux/; fi
          if [ -d "fitflutterfluent-android" ]; then echo "--- fitflutterfluent-android ---"; ls -lA fitflutterfluent-android/; fi

      - name: Zip Windows unpacked build
        run: |
          WINDOWS_UNPACKED_ZIP_NAME="fitflutterfluent-windows-${{ needs.resolve-version.outputs.app_version }}.zip"
          echo "Zipping contents of fitflutterfluent-windows-unpacked into $WINDOWS_UNPACKED_ZIP_NAME"
          cd fitflutterfluent-windows-unpacked
          zip -r ../${WINDOWS_UNPACKED_ZIP_NAME} .
          cd ..
          echo "Created ${WINDOWS_UNPACKED_ZIP_NAME}"
          ls -l 

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', needs.resolve-version.outputs.app_version) }}
          name: Release ${{ needs.resolve-version.outputs.app_version }}
          draft: false 
          generate_release_notes: true
          files: |
            fitflutterfluent-windows-${{ needs.resolve-version.outputs.app_version }}.zip
            fitflutterfluent-windows-setup/fit-flutter-setup-win64-${{ needs.resolve-version.outputs.app_version }}.exe
            fitflutterfluent-linux/fitflutterfluent-linux-${{ needs.resolve-version.outputs.app_version }}.tar.gz
            fitflutterfluent-android/fitflutterfluent-android-${{ needs.resolve-version.outputs.app_version }}.apk