name: Build FitFlutterFluent Releases

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Manual version (e.g., 1.2.3). If empty and not a tag, uses pubspec.yaml."
        required: false
        default: ""

jobs:
  resolve-version:
    name: Resolve Application Version
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.determine_version.outputs.version_number }}
      build_number: ${{ steps.determine_version.outputs.build_suffix }}
    steps:
      - uses: actions/checkout@v4
      - name: Determine Version and Build Number
        id: determine_version
        run: |
          VERSION_NUMBER=""
          BUILD_SUFFIX="" # Will hold the final build number

          SOURCE_VERSION_STRING=""
          if [[ "${{ github.event_name }}" == "push" && "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            TAG_NAME="${{ github.ref_name }}"
            SOURCE_VERSION_STRING="${TAG_NAME#v}"
            echo "Using version from tag: $TAG_NAME"
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            SOURCE_VERSION_STRING="${{ github.event.inputs.version }}"
            echo "Using version from manual input: $SOURCE_VERSION_STRING"
          else
            echo "Reading version from pubspec.yaml"
            SOURCE_VERSION_STRING=$(grep '^version: ' pubspec.yaml | sed 's/version: //')
            SOURCE_VERSION_STRING=$(echo "$SOURCE_VERSION_STRING" | xargs)
            echo "Using version from pubspec.yaml: $SOURCE_VERSION_STRING"
          fi

          # --- Enhanced Version and Build Suffix Parsing ---
          PARSED_BUILD_SUFFIX_FROM_SOURCE=""

          if [[ "$SOURCE_VERSION_STRING" == *"+"* ]]; then
            PROVISIONAL_VERSION_NUMBER="${SOURCE_VERSION_STRING%+*}"
            PROVISIONAL_BUILD_SUFFIX="${SOURCE_VERSION_STRING#*+}"

            VERSION_NUMBER=$(echo "$PROVISIONAL_VERSION_NUMBER" | xargs)
            PROVISIONAL_BUILD_SUFFIX=$(echo "$PROVISIONAL_BUILD_SUFFIX" | xargs)

            if [[ "$PROVISIONAL_BUILD_SUFFIX" =~ ^[1-9][0-9]*$ ]]; then
              PARSED_BUILD_SUFFIX_FROM_SOURCE="$PROVISIONAL_BUILD_SUFFIX"
              echo "Parsed version_number '$VERSION_NUMBER' and valid build_suffix '$PARSED_BUILD_SUFFIX_FROM_SOURCE' from source '$SOURCE_VERSION_STRING'."
            else
              echo "Warning: Suffix after '+' in '$SOURCE_VERSION_STRING' ('$PROVISIONAL_BUILD_SUFFIX') is not a positive integer. It will be ignored for build_number. Version number is '$VERSION_NUMBER'."
              # PARSED_BUILD_SUFFIX_FROM_SOURCE remains empty, will trigger fallback for build_number.
            fi
          else
            VERSION_NUMBER="$SOURCE_VERSION_STRING"
            VERSION_NUMBER=$(echo "$VERSION_NUMBER" | xargs)
            # PARSED_BUILD_SUFFIX_FROM_SOURCE remains empty
          fi

          # Validate VERSION_NUMBER (app_version)
          if [[ -z "$VERSION_NUMBER" ]]; then
            echo "Error: Version number (app_version) could not be determined or is empty."
            exit 1
          fi
          if ! [[ "$VERSION_NUMBER" =~ ^[0-9]+\.[0-9]+\.[0-9]+([._-].+)?$ ]]; then
            if ! [[ "$VERSION_NUMBER" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "Warning: VERSION_NUMBER ('$VERSION_NUMBER') doesn't strictly follow X.Y.Z or X.Y.Z.suffix. Ensure it's compatible with build tools."
            fi
          fi

          # Determine final BUILD_SUFFIX (build_number)
          if [[ -n "$PARSED_BUILD_SUFFIX_FROM_SOURCE" ]]; then
            # If a valid build suffix was parsed from the source (tag, input, pubspec)
            BUILD_SUFFIX="$PARSED_BUILD_SUFFIX_FROM_SOURCE"
            echo "Using explicitly provided build_suffix: $BUILD_SUFFIX"
          else
            # No valid +NUMBER was found in the source string, or no + was present. Fallback logic:
            if [[ "${{ github.event_name }}" == "push" && "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
              # For a tag like v1.2.3 (no +B), default build_suffix to 1.
              BUILD_SUFFIX="1"
              echo "Event is a tag push without '+suffix'. Defaulting build_suffix to '1'."
            elif [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.version }}" && ! ( "${{ github.event.inputs.version }}" == *"+"* ) ]]; then
              # For manual dispatch where input version is like "1.2.3" (no +suffix)
              BUILD_SUFFIX="${{ github.run_number }}"
              echo "Event is workflow_dispatch with manual version without '+suffix'. Using github.run_number ('$BUILD_SUFFIX') as build_suffix."
            else
              # Default for other cases (e.g. reading from pubspec.yaml without +suffix, or a non-tag push, or dispatch with empty version)
              BUILD_SUFFIX="${{ github.run_number }}"
              echo "No explicit build_suffix provided or not a simple tag. Using github.run_number ('$BUILD_SUFFIX') as build_suffix."
            fi
          fi

          # Final validation: ensure BUILD_SUFFIX is a positive integer.
          if ! [[ "$BUILD_SUFFIX" =~ ^[1-9][0-9]*$ ]]; then
            echo "Error: BUILD_SUFFIX ('$BUILD_SUFFIX') could not be resolved to a positive integer. This indicates a logic flaw or unexpected input. Defaulting to 1 to prevent catastrophic failure."
            BUILD_SUFFIX="1" # Safety net
          fi
          # --- End of Enhanced Logic ---

          echo "Determined app_version: $VERSION_NUMBER"
          echo "Determined build_number: $BUILD_SUFFIX"

          echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT
          echo "build_suffix=$BUILD_SUFFIX" >> $GITHUB_OUTPUT # This output is used as build_number

  build-windows:
    name: Build Windows Release
    runs-on: windows-latest
    needs: resolve-version
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.32.0 # Ensure this Flutter version exists or use a channel like 'stable'
      - run: flutter pub get
      - name: Flutter Build Windows
        run: |
          flutter build windows --release --build-name=${{ needs.resolve-version.outputs.app_version }} --build-number=${{ needs.resolve-version.outputs.build_number }}
          echo "Built with version: ${{ needs.resolve-version.outputs.app_version }}+${{ needs.resolve-version.outputs.build_number }}"
      - name: Prepare Windows Artifact
        run: |
          mkdir dist
          cp -r build/windows/x64/runner/Release dist/fitflutterfluent
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fitflutterfluent-windows-unpacked
          path: dist/fitflutterfluent

  innosetup:
    name: Build Inno Setup Installer
    runs-on: windows-latest
    needs: [build-windows, resolve-version]
    env:
      APP_VERSION: ${{ needs.resolve-version.outputs.app_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Download Windows Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: fitflutterfluent-windows-unpacked
          path: build/windows/x64/runner/Release # This path should match the contents of the zip from build-windows
      - name: Prepare Additional Files for Inno Setup
        run: |
          mkdir -p setup
          echo "Listing contents of expected Inno Setup source directory:"
          ls -R build/windows/x64/runner/Release
          echo "Listing contents of setup directory (if used):"
          ls -R setup
        shell: bash
      - name: Install Inno Setup
        run: choco install innosetup --no-progress
      - name: Build Installer
        run: iscc /DMyAppVersion="${{ env.APP_VERSION }}" setupmaker.iss
      - name: List Installer Output
        run: ls -R Output
        shell: bash
      - name: Upload InnoSetup Installer
        uses: actions/upload-artifact@v4
        with:
          name: fitflutterfluent-windows-setup
          path: Output/fit-flutter-setup-win64-${{ env.APP_VERSION }}.exe

  build-linux:
    name: Build Linux Release (${{ matrix.arch_name }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - os_runner: ubuntu-latest
            arch_name: x64
            flutter_arch: x64
            appimage_tool_arch: x86_64
          - os_runner: ubuntu-22.04-arm # Ensure this runner supports ARM, or use a self-hosted ARM runner
            arch_name: arm64
            flutter_arch: arm64
            appimage_tool_arch: aarch64
    runs-on: ${{ matrix.os_runner }}
    needs: resolve-version
    env:
      APP_VERSION: ${{ needs.resolve-version.outputs.app_version }}
      BUILD_NUMBER: ${{ needs.resolve-version.outputs.build_number }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Flutter prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y curl git unzip xz-utils zip libglu1-mesa clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev imagemagick wget libfuse2

      - name: Clone Flutter
        run: |
          # Ensure this branch/tag exists. If '3.32.0' is not a valid Flutter version/branch, this will fail.
          # Consider using 'stable', 'beta', or a specific existing version tag e.g. '3.19.6'
          git clone --depth 1 --branch 3.32.0 https://github.com/flutter/flutter.git $RUNNER_TEMP/flutter
          echo "$RUNNER_TEMP/flutter/bin" >> $GITHUB_PATH

      - name: Install Flutter SDK
        run: flutter doctor

      - name: Update pubspec.yaml with CI version
        # yq needs to be installed if not available on the runner. Add an install step if necessary.
        run: |
          echo "Original pubspec.yaml version:"
          grep '^version: ' pubspec.yaml

          yq -i ".version = \"${APP_VERSION}+${BUILD_NUMBER}\"" pubspec.yaml

          echo "Updated pubspec.yaml version to:"
          grep '^version: ' pubspec.yaml
        shell: bash

      - name: Flutter Pub Get (after pubspec modification)
        run: flutter pub get

      - name: Flutter Build Linux (${{ matrix.arch_name }})
        run: |
          flutter build linux --release \
            --build-name=${APP_VERSION} \
            --build-number=${BUILD_NUMBER}
          echo "Built for ${{ matrix.arch_name }} with version (from CI args): ${APP_VERSION}+${BUILD_NUMBER}"
          echo "Version in built pubspec.yaml (used by package_info_plus on Linux):"
          cat build/linux/${{ matrix.flutter_arch }}/release/bundle/data/flutter_assets/pubspec.yaml | grep '^version: ' || echo "pubspec.yaml not found in bundle assets or version not present"

      - name: Prepare Linux Artifact (${{ matrix.arch_name }})
        id: prepare_artifact
        run: |
          FLUTTER_BUILD_OUTPUT_PATH="build/linux/${{ matrix.flutter_arch }}/release/bundle"
          ARCH_LABEL="${{ matrix.arch_name }}"
          TARBALL_FILENAME="fitflutterfluent-linux-$ARCH_LABEL-$APP_VERSION.tar.gz"
          FINAL_TARBALL_DIR="dist_tarballs"
          mkdir -p "$FINAL_TARBALL_DIR"
          CONTENT_STAGING_DIR="dist_content_for_tar"
          mkdir -p "$CONTENT_STAGING_DIR/fitflutterfluent"
          cp -r $FLUTTER_BUILD_OUTPUT_PATH/* "$CONTENT_STAGING_DIR/fitflutterfluent/"
          tar -czf "$FINAL_TARBALL_DIR/$TARBALL_FILENAME" -C "$CONTENT_STAGING_DIR" fitflutterfluent
          ABSOLUTE_TARBALL_PATH="$(pwd)/$FINAL_TARBALL_DIR/$TARBALL_FILENAME"
          echo "tarball_path=$ABSOLUTE_TARBALL_PATH" >> $GITHUB_OUTPUT
          echo "artifact_upload_name=fitflutterfluent-linux-$ARCH_LABEL" >> $GITHUB_OUTPUT

      - name: Upload Linux Artifact (${{ matrix.arch_name }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare_artifact.outputs.artifact_upload_name }}
          path: ${{ steps.prepare_artifact.outputs.tarball_path }}

      - name: Prepare AppDir for AppImage (${{ matrix.arch_name }})
        id: prepare_appdir
        run: |
          FLUTTER_BUILD_OUTPUT_PATH="build/linux/${{ matrix.flutter_arch }}/release/bundle"
          APPDIR_NAME="FitFlutterFluent.AppDir"
          PUBSPEC_APP_NAME=$(yq e '.name' pubspec.yaml)
          APP_FILE_BASENAME=$(echo "$PUBSPEC_APP_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')
          APP_DESCRIPTION=$(yq e '.description' pubspec.yaml)
          APP_EXECUTABLE_IN_BUNDLE="$PUBSPEC_APP_NAME"

          mkdir -p "$APPDIR_NAME/usr/bin"
          mkdir -p "$APPDIR_NAME/usr/share/icons/hicolor/scalable/apps"
          mkdir -p "$APPDIR_NAME/usr/share/applications"
          cp -a "$FLUTTER_BUILD_OUTPUT_PATH"/* "$APPDIR_NAME/"

          if [ ! -f "$APPDIR_NAME/$APP_EXECUTABLE_IN_BUNDLE" ]; then
              echo "Error: Expected executable '$APPDIR_NAME/$APP_EXECUTABLE_IN_BUNDLE' not found!"
              ACTUAL_EXECUTABLE_FOUND=$(find "$APPDIR_NAME" -maxdepth 1 -type f -executable -not -name "*.so" -print -quit)
              if [ -n "$ACTUAL_EXECUTABLE_FOUND" ]; then
                APP_EXECUTABLE_IN_BUNDLE=$(basename "$ACTUAL_EXECUTABLE_FOUND")
                echo "Using fallback executable found: $APP_EXECUTABLE_IN_BUNDLE"
              else
                echo "No suitable executable found in $APPDIR_NAME. Exiting."
                exit 1
              fi
          fi

          cat <<EOF > "$APPDIR_NAME/$APP_FILE_BASENAME.desktop"
          [Desktop Entry]
          Name=$PUBSPEC_APP_NAME
          Comment=$APP_DESCRIPTION
          Exec=$APP_EXECUTABLE_IN_BUNDLE
          Icon=$APP_FILE_BASENAME
          Type=Application
          Categories=Utility;
          EOF
          cp "$APPDIR_NAME/$APP_FILE_BASENAME.desktop" "$APPDIR_NAME/usr/share/applications/"

          ICON_SOURCE_PATH="assets/icon.png" # Ensure this path is correct
          if [ -f "$ICON_SOURCE_PATH" ]; then
            ICON_EXTENSION="${ICON_SOURCE_PATH##*.}"
            cp "$ICON_SOURCE_PATH" "$APPDIR_NAME/$APP_FILE_BASENAME.$ICON_EXTENSION"
            if [ "$ICON_EXTENSION" == "svg" ]; then
                cp "$ICON_SOURCE_PATH" "$APPDIR_NAME/usr/share/icons/hicolor/scalable/apps/$APP_FILE_BASENAME.svg"
            else
                mkdir -p "$APPDIR_NAME/usr/share/icons/hicolor/256x256/apps"
                cp "$ICON_SOURCE_PATH" "$APPDIR_NAME/usr/share/icons/hicolor/256x256/apps/$APP_FILE_BASENAME.$ICON_EXTENSION"
            fi
          else
            echo "Warning: Icon file not found at '$ICON_SOURCE_PATH'. Creating a dummy icon."
            convert -size 256x256 xc:dodgerblue -pointsize 20 -fill white -gravity center -draw "text 0,0 '$PUBSPEC_APP_NAME'" "$APPDIR_NAME/$APP_FILE_BASENAME.png"
            mkdir -p "$APPDIR_NAME/usr/share/icons/hicolor/256x256/apps"
            cp "$APPDIR_NAME/$APP_FILE_BASENAME.png" "$APPDIR_NAME/usr/share/icons/hicolor/256x256/apps/$APP_FILE_BASENAME.png"
          fi

          ln -sf "$APP_EXECUTABLE_IN_BUNDLE" "$APPDIR_NAME/AppRun"
          chmod +x "$APPDIR_NAME/AppRun"

          echo "appdir_path=$(pwd)/$APPDIR_NAME" >> $GITHUB_OUTPUT
          echo "app_file_basename=$APP_FILE_BASENAME" >> $GITHUB_OUTPUT
          echo "appimage_arch_label=${{ matrix.appimage_tool_arch }}" >> $GITHUB_OUTPUT

      - name: Download AppImageTool (${{ matrix.arch_name }})
        run: |
          wget -q "https://github.com/AppImage/appimagetool/releases/download/13/appimagetool-${{ matrix.appimage_tool_arch }}.AppImage" -O appimagetool.AppImage
          chmod +x appimagetool.AppImage

      - name: Build AppImage (${{ matrix.arch_name }})
        id: build_appimage
        run: |
          APPDIR_PATH="${{ steps.prepare_appdir.outputs.appdir_path }}"
          APPIMAGE_ARCH_LABEL_FOR_TOOL="${{ steps.prepare_appdir.outputs.appimage_arch_label }}"
          APPIMAGE_FILENAME="fit-flutter-fluent-${APP_VERSION}-${APPIMAGE_ARCH_LABEL_FOR_TOOL}.AppImage"
          ARCH="$APPIMAGE_ARCH_LABEL_FOR_TOOL" ./appimagetool.AppImage "$APPDIR_PATH" "$APPIMAGE_FILENAME"
          FINAL_APPIMAGE_DIR="dist_appimages"
          mkdir -p "$FINAL_APPIMAGE_DIR"
          mv "$APPIMAGE_FILENAME" "$FINAL_APPIMAGE_DIR/"
          ABSOLUTE_APPIMAGE_PATH="$(pwd)/$FINAL_APPIMAGE_DIR/$APPIMAGE_FILENAME"
          echo "appimage_path=$ABSOLUTE_APPIMAGE_PATH" >> $GITHUB_OUTPUT
          echo "appimage_upload_name=fit-flutter-fluent-appimage-linux-$APPIMAGE_ARCH_LABEL_FOR_TOOL" >> $GITHUB_OUTPUT
          echo "appimage_filename_for_release=$APPIMAGE_FILENAME" >> $GITHUB_OUTPUT
          echo "appimage_filename_for_release=$APPIMAGE_FILENAME" >> $GITHUB_OUTPUT 

      - name: Upload Linux AppImage Artifact (${{ matrix.arch_name }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_appimage.outputs.appimage_upload_name }}
          path: ${{ steps.build_appimage.outputs.appimage_path }}

  build-android:
    name: Build Android APKs (Split ABI)
    runs-on: ubuntu-latest
    needs: resolve-version
    env:
      APP_VERSION: ${{ needs.resolve-version.outputs.app_version }}
      BUILD_NUMBER: ${{ needs.resolve-version.outputs.build_number }}
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.32.0 # Ensure this Flutter version exists or use a channel like 'stable'

      - name: Update pubspec.yaml for Android build
        # yq needs to be installed if not available on the runner. Add an install step if necessary.
        run: |
          echo "Original pubspec.yaml version:"
          grep '^version: ' pubspec.yaml
          yq -i ".version = \"${{ env.APP_VERSION }}+${{ env.BUILD_NUMBER }}\"" pubspec.yaml
          echo "Updated pubspec.yaml version to: $(grep '^version: ' pubspec.yaml)"
        shell: bash

      - run: flutter pub get

      - name: Flutter Build Android APKs (Split ABI)
        run: |
          flutter build apk --split-per-abi --release \
            --build-name=${{ env.APP_VERSION }} \
            --build-number=${{ env.BUILD_NUMBER }}
          echo "Built Android APKs (Split ABI) with versionName: ${{ env.APP_VERSION }}, versionCode: ${{ env.BUILD_NUMBER }}"
          echo "Output directory: build/app/outputs/flutter-apk/"
          ls -l build/app/outputs/flutter-apk/

      - name: Prepare and Rename Android APKs
        id: prepare_apks
        run: |
          FLUTTER_APK_OUTPUT_DIR="build/app/outputs/flutter-apk"
          FINAL_APK_DIR="android_apks_for_release" # Directory to store renamed APKs
          mkdir -p "$FINAL_APK_DIR"

          APP_NAME_BASE="fitflutterfluent-android-${{ env.APP_VERSION }}"
          found_apks=0

          # Define ABIs typically built by Flutter for APKs
          # Default is usually: armeabi-v7a, arm64-v8a, x86_64
          ABIS_TO_PROCESS=("arm64-v8a" "armeabi-v7a" "x86_64")

          for abi in "${ABIS_TO_PROCESS[@]}"; do
            original_apk_filename="app-${abi}-release.apk"
            final_apk_filename="${APP_NAME_BASE}-${abi}.apk"

            if [[ -f "$FLUTTER_APK_OUTPUT_DIR/$original_apk_filename" ]]; then
              mv "$FLUTTER_APK_OUTPUT_DIR/$original_apk_filename" "$FINAL_APK_DIR/$final_apk_filename"
              echo "Prepared: $FINAL_APK_DIR/$final_apk_filename"
              found_apks=$((found_apks + 1))
            else
              echo "Warning: Original APK for ABI '$abi' ($original_apk_filename) not found in $FLUTTER_APK_OUTPUT_DIR."
            fi
          done

          if [[ $found_apks -eq 0 ]]; then
            echo "Error: No APKs matching expected ABIs found in $FLUTTER_APK_OUTPUT_DIR."
            echo "Contents of $FLUTTER_APK_OUTPUT_DIR:"
            ls -l "$FLUTTER_APK_OUTPUT_DIR" # List contents for debugging
            exit 1
          fi

          echo "All prepared APKs are in '$FINAL_APK_DIR':"
          ls -l "$FINAL_APK_DIR"
          # Output the path to the directory containing all prepared APKs for upload
          echo "release_dir_path=$FINAL_APK_DIR" >> $GITHUB_OUTPUT

      - name: Upload Android APKs Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fitflutterfluent-android-apks # Artifact name reflects multiple APKs
          path: ${{ steps.prepare_apks.outputs.release_dir_path }} # Upload the directory containing all APKs

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      [resolve-version, build-windows, innosetup, build-linux, build-android]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        # This will download all artifacts into directories named after the artifact names.
        # e.g., ./fitflutterfluent-windows-unpacked/, ./fitflutterfluent-android-apks/, etc.

      - name: List downloaded files
        run: |
          echo "--- Listing root of workspace ---"
          ls -lA
          echo "--- Listing contents of downloaded artifact directories ---"
          if [ -d "fitflutterfluent-windows-unpacked" ]; then echo "--- fitflutterfluent-windows-unpacked ---"; ls -lA fitflutterfluent-windows-unpacked/; fi
          if [ -d "fitflutterfluent-windows-setup" ]; then echo "--- fitflutterfluent-windows-setup ---"; ls -lA fitflutterfluent-windows-setup/; fi
          if [ -d "fitflutterfluent-linux-x64" ]; then echo "--- fitflutterfluent-linux-x64 ---"; ls -lA fitflutterfluent-linux-x64/; fi
          if [ -d "fitflutterfluent-linux-arm64" ]; then echo "--- fitflutterfluent-linux-arm64 ---"; ls -lA fitflutterfluent-linux-arm64/; fi
          if [ -d "fit-flutter-fluent-appimage-linux-x86_64" ]; then echo "--- fit-flutter-fluent-appimage-linux-x86_64 ---"; ls -lA fit-flutter-fluent-appimage-linux-x86_64/; fi
          if [ -d "fit-flutter-fluent-appimage-linux-aarch64" ]; then echo "--- fit-flutter-fluent-appimage-linux-aarch64 ---"; ls -lA fit-flutter-fluent-appimage-linux-aarch64/; fi
          if [ -d "fitflutterfluent-android-apks" ]; then echo "--- fitflutterfluent-android-apks ---"; ls -lA fitflutterfluent-android-apks/; fi

      - name: Zip Windows unpacked build
        run: |
          WINDOWS_UNPACKED_ZIP_NAME="fitflutterfluent-windows-${{ needs.resolve-version.outputs.app_version }}.zip"
          echo "Zipping contents of fitflutterfluent-windows-unpacked into $WINDOWS_UNPACKED_ZIP_NAME"
          # Ensure the source directory exists before attempting to cd into it
          if [ -d "fitflutterfluent-windows-unpacked" ]; then
            cd fitflutterfluent-windows-unpacked
            zip -r ../${WINDOWS_UNPACKED_ZIP_NAME} .
            cd ..
            echo "Created ${WINDOWS_UNPACKED_ZIP_NAME}"
          else
            echo "Warning: fitflutterfluent-windows-unpacked directory not found. Skipping zipping."
          fi
          ls -l

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', needs.resolve-version.outputs.app_version) }}
          name: Release ${{ needs.resolve-version.outputs.app_version }}
          draft: true
          generate_release_notes: true
          files: |
            fitflutterfluent-windows-${{ needs.resolve-version.outputs.app_version }}.zip
            fitflutterfluent-windows-setup/fit-flutter-setup-win64-${{ needs.resolve-version.outputs.app_version }}.exe
            fitflutterfluent-linux-x64/fitflutterfluent-linux-x64-${{ needs.resolve-version.outputs.app_version }}.tar.gz
            fitflutterfluent-linux-arm64/fitflutterfluent-linux-arm64-${{ needs.resolve-version.outputs.app_version }}.tar.gz
            fit-flutter-fluent-appimage-linux-x86_64/fit-flutter-fluent-${{ needs.resolve-version.outputs.app_version }}-x86_64.AppImage
            fit-flutter-fluent-appimage-linux-aarch64/fit-flutter-fluent-${{ needs.resolve-version.outputs.app_version }}-aarch64.AppImage
            fitflutterfluent-android-apks/fitflutterfluent-android-${{ needs.resolve-version.outputs.app_version }}-arm64-v8a.apk
            fitflutterfluent-android-apks/fitflutterfluent-android-${{ needs.resolve-version.outputs.app_version }}-armeabi-v7a.apk
            fitflutterfluent-android-apks/fitflutterfluent-android-${{ needs.resolve-version.outputs.app_version }}-x86_64.apk
