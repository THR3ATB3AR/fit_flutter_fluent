name: Build FitFlutterFluent Releases

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Manual version (e.g., 1.2.3). If empty and not a tag, uses pubspec.yaml.'
        required: false
        default: ''

jobs:
  resolve-version:
    name: Resolve Application Version
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.determine_version.outputs.version_number }}
      build_number: ${{ steps.determine_version.outputs.build_suffix }}
    steps:
      - uses: actions/checkout@v4
      - name: Determine Version and Build Number
        id: determine_version
        run: |
          VERSION_NUMBER=""
          BUILD_SUFFIX="1" 

          SOURCE_VERSION_STRING=""
          if [[ "${{ github.event_name }}" == "push" && "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            TAG_NAME="${{ github.ref_name }}"
            SOURCE_VERSION_STRING="${TAG_NAME#v}" 
            echo "Using version from tag: $TAG_NAME"
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            SOURCE_VERSION_STRING="${{ github.event.inputs.version }}"
            echo "Using version from manual input: $SOURCE_VERSION_STRING"
          else
            echo "Reading version from pubspec.yaml"
            SOURCE_VERSION_STRING=$(grep '^version: ' pubspec.yaml | sed 's/version: //')
            SOURCE_VERSION_STRING=$(echo "$SOURCE_VERSION_STRING" | xargs) 
            echo "Using version from pubspec.yaml: $SOURCE_VERSION_STRING"
          fi

          if [[ "$SOURCE_VERSION_STRING" == *"+"* ]]; then
            PROVISIONAL_BUILD_SUFFIX="${SOURCE_VERSION_STRING#*+}"
            PROVISIONAL_BUILD_SUFFIX=$(echo "$PROVISIONAL_BUILD_SUFFIX" | xargs)
            if [[ -n "$PROVISIONAL_BUILD_SUFFIX" ]]; then
                BUILD_SUFFIX="$PROVISIONAL_BUILD_SUFFIX"
            fi
            VERSION_NUMBER="${SOURCE_VERSION_STRING%+*}"
          else
            VERSION_NUMBER="$SOURCE_VERSION_STRING"
          fi
          
          VERSION_NUMBER=$(echo "$VERSION_NUMBER" | xargs)

          if [[ -z "$VERSION_NUMBER" ]]; then
            echo "Error: Version number (app_version) could not be determined or is empty."
            exit 1
          fi
          if ! [[ "$VERSION_NUMBER" =~ ^[0-9]+\.[0-9]+\.[0-9]+([._-].+)?$ ]]; then
            if ! [[ "$VERSION_NUMBER" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "Warning: VERSION_NUMBER ('$VERSION_NUMBER') doesn't strictly follow X.Y.Z. Ensure it's compatible with build tools."
            fi
          fi

          if ! [[ "$BUILD_SUFFIX" =~ ^[1-9][0-9]*$ ]]; then
            echo "Warning: BUILD_SUFFIX ('$BUILD_SUFFIX') was empty, zero, non-numeric, or not a positive integer. Defaulting to 1."
            BUILD_SUFFIX="1"
          fi

          echo "Determined app_version: $VERSION_NUMBER"
          echo "Determined build_suffix (build_number): $BUILD_SUFFIX"

          echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT
          echo "build_suffix=$BUILD_SUFFIX" >> $GITHUB_OUTPUT

  build-windows:
    name: Build Windows Release
    runs-on: windows-latest
    needs: resolve-version
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.32.0
      - run: flutter pub get
      - name: Flutter Build Windows
        run: |
          flutter build windows --release --build-name=${{ needs.resolve-version.outputs.app_version }} 
          echo "Built with version: ${{ needs.resolve-version.outputs.app_version }}"
      - name: Prepare Windows Artifact
        run: |
          mkdir dist
          cp -r build/windows/x64/runner/Release dist/fitflutterfluent 
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fitflutterfluent-windows-unpacked
          path: dist/fitflutterfluent

  innosetup:
    name: Build Inno Setup Installer
    runs-on: windows-latest
    needs: [build-windows, resolve-version]
    env:
      APP_VERSION: ${{ needs.resolve-version.outputs.app_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Download Windows Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: fitflutterfluent-windows-unpacked
          path: build/windows/x64/runner/Release
      - name: Prepare Additional Files for Inno Setup
        run: |
          mkdir -p setup  
          echo "Listing contents of expected Inno Setup source directory:"
          ls -R build/windows/x64/runner/Release 
          echo "Listing contents of setup directory (if used):"
          ls -R setup 
        shell: bash
      - name: Install Inno Setup
        run: choco install innosetup --no-progress
      - name: Build Installer
        run: iscc /DMyAppVersion="${{ env.APP_VERSION }}" setupmaker.iss
      - name: List Installer Output
        run: ls -R Output 
        shell: bash
      - name: Upload InnoSetup Installer
        uses: actions/upload-artifact@v4
        with:
          name: fitflutterfluent-windows-setup
          path: Output/fit-flutter-setup-win64-${{ env.APP_VERSION }}.exe

  build-linux:
    name: Build Linux Release (${{ matrix.arch_name }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - os_runner: ubuntu-latest
            arch_name: x64
            flutter_arch: x64
            appimage_tool_arch: x86_64
          - os_runner: ubuntu-22.04-arm
            arch_name: arm64
            flutter_arch: arm64
            appimage_tool_arch: aarch64
    runs-on: ${{ matrix.os_runner }}
    needs: resolve-version
    env:
      APP_VERSION: ${{ needs.resolve-version.outputs.app_version }}
      BUILD_NUMBER: ${{ needs.resolve-version.outputs.build_number }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Flutter prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y curl git unzip xz-utils zip libglu1-mesa clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev 

      - name: Clone Flutter
        run: |
          git clone --depth 1 --branch 3.32.0 https://github.com/flutter/flutter.git $RUNNER_TEMP/flutter
          echo "$RUNNER_TEMP/flutter/bin" >> $GITHUB_PATH

      - name: Install Flutter SDK
        run: flutter doctor

      - name: Update pubspec.yaml with CI version
        run: |
          echo "Original pubspec.yaml version:"
          grep '^version: ' pubspec.yaml

          yq -i ".version = \"${APP_VERSION}+${BUILD_NUMBER}\"" pubspec.yaml
          

          echo "Updated pubspec.yaml version to:"
          grep '^version: ' pubspec.yaml
        shell: bash

      - name: Flutter Pub Get (after pubspec modification)
        run: flutter pub get

      - name: Flutter Build Linux (${{ matrix.arch_name }})
        run: |
          flutter build linux --release \
            --build-name=${APP_VERSION} \
            --build-number=${BUILD_NUMBER}
          echo "Built for ${{ matrix.arch_name }} with version (from CI args): ${APP_VERSION}+${BUILD_NUMBER}"
          echo "Version in built pubspec.yaml (used by package_info_plus on Linux):"
          cat build/linux/${{ matrix.flutter_arch }}/release/bundle/data/flutter_assets/pubspec.yaml | grep '^version: ' || echo "pubspec.yaml not found in bundle assets or version not present"


      - name: Prepare Linux Artifact (${{ matrix.arch_name }})
        id: prepare_artifact
        run: |
          FLUTTER_BUILD_OUTPUT_PATH="build/linux/${{ matrix.flutter_arch }}/release/bundle"
          # APP_VERSION is already available from job's env
          ARCH_LABEL="${{ matrix.arch_name }}"

          # The tarball name should reflect the CI version
          TARBALL_FILENAME="fitflutterfluent-linux-$ARCH_LABEL-$APP_VERSION.tar.gz"
          
          FINAL_TARBALL_DIR="dist_tarballs" 
          mkdir -p "$FINAL_TARBALL_DIR"

          CONTENT_STAGING_DIR="dist_content_for_tar"
          mkdir -p "$CONTENT_STAGING_DIR/fitflutterfluent"

          echo "Copying from $FLUTTER_BUILD_OUTPUT_PATH/* to $CONTENT_STAGING_DIR/fitflutterfluent/"
          cp -r $FLUTTER_BUILD_OUTPUT_PATH/* "$CONTENT_STAGING_DIR/fitflutterfluent/"
          
          echo "Creating $FINAL_TARBALL_DIR/$TARBALL_FILENAME from content in $CONTENT_STAGING_DIR/fitflutterfluent"
          tar -czf "$FINAL_TARBALL_DIR/$TARBALL_FILENAME" -C "$CONTENT_STAGING_DIR" fitflutterfluent
          
          ABSOLUTE_TARBALL_PATH="$(pwd)/$FINAL_TARBALL_DIR/$TARBALL_FILENAME"
          echo "Final tarball path: $ABSOLUTE_TARBALL_PATH"
          echo "tarball_path=$ABSOLUTE_TARBALL_PATH" >> $GITHUB_OUTPUT
          echo "artifact_upload_name=fitflutterfluent-linux-$ARCH_LABEL" >> $GITHUB_OUTPUT

      - name: Upload Linux Artifact (${{ matrix.arch_name }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare_artifact.outputs.artifact_upload_name }}
          path: ${{ steps.prepare_artifact.outputs.tarball_path }}

      - name: Prepare AppDir for AppImage (${{ matrix.arch_name }})
        id: prepare_appdir
        run: |
          FLUTTER_BUILD_OUTPUT_PATH="build/linux/${{ matrix.flutter_arch }}/release/bundle"
          APPDIR_NAME="FitFlutterFluent.AppDir" # Conventionally PascalCase for AppDir
          
          PUBSPEC_APP_NAME=$(yq e '.name' pubspec.yaml) # e.g., fit_flutter_fluent
          APP_FILE_BASENAME=$(echo "$PUBSPEC_APP_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g') # e.g., fit-flutter-fluent
          APP_DESCRIPTION=$(yq e '.description' pubspec.yaml)
          APP_EXECUTABLE_IN_BUNDLE="$PUBSPEC_APP_NAME"

          echo "Pubspec App Name: $PUBSPEC_APP_NAME"
          echo "App File Basename (for .desktop, icon names): $APP_FILE_BASENAME"
          echo "App Description: $APP_DESCRIPTION"
          echo "Expected executable in bundle: $APP_EXECUTABLE_IN_BUNDLE"

          mkdir -p "$APPDIR_NAME/usr/bin"
          mkdir -p "$APPDIR_NAME/usr/share/icons/hicolor/scalable/apps" # For .svg or high-res .png
          mkdir -p "$APPDIR_NAME/usr/share/applications"

          echo "Copying application files from $FLUTTER_BUILD_OUTPUT_PATH to $APPDIR_NAME/"
          cp -a "$FLUTTER_BUILD_OUTPUT_PATH"/* "$APPDIR_NAME/"

          if [ ! -f "$APPDIR_NAME/$APP_EXECUTABLE_IN_BUNDLE" ]; then
              echo "Error: Expected executable '$APPDIR_NAME/$APP_EXECUTABLE_IN_BUNDLE' not found!"
              echo "Contents of $APPDIR_NAME:"
              ls -lA "$APPDIR_NAME"
              ACTUAL_EXECUTABLE_FOUND=$(find "$APPDIR_NAME" -maxdepth 1 -type f -executable -not -name "*.so" -print -quit)
              if [ -n "$ACTUAL_EXECUTABLE_FOUND" ]; then
                APP_EXECUTABLE_IN_BUNDLE=$(basename "$ACTUAL_EXECUTABLE_FOUND")
                echo "Using fallback executable found: $APP_EXECUTABLE_IN_BUNDLE"
              else
                echo "No suitable executable found in $APPDIR_NAME. Exiting."
                exit 1
              fi
          fi

          echo "Creating .desktop file: $APPDIR_NAME/$APP_FILE_BASENAME.desktop"
          cat <<EOF > "$APPDIR_NAME/$APP_FILE_BASENAME.desktop"
[Desktop Entry]
Name=$PUBSPEC_APP_NAME
Comment=$APP_DESCRIPTION
Exec=$APP_EXECUTABLE_IN_BUNDLE
Icon=$APP_FILE_BASENAME
Type=Application
Categories=Utility;
EOF
          cp "$APPDIR_NAME/$APP_FILE_BASENAME.desktop" "$APPDIR_NAME/usr/share/applications/"

          echo "Copying icon..."
          ICON_SOURCE_PATH="assets/icon.png"
          
          if [ -f "$ICON_SOURCE_PATH" ]; then
            ICON_EXTENSION="${ICON_SOURCE_PATH##*.}"
            cp "$ICON_SOURCE_PATH" "$APPDIR_NAME/$APP_FILE_BASENAME.$ICON_EXTENSION" 
            if [ "$ICON_EXTENSION" == "svg" ]; then
                cp "$ICON_SOURCE_PATH" "$APPDIR_NAME/usr/share/icons/hicolor/scalable/apps/$APP_FILE_BASENAME.svg"
            else
                mkdir -p "$APPDIR_NAME/usr/share/icons/hicolor/256x256/apps"
                cp "$ICON_SOURCE_PATH" "$APPDIR_NAME/usr/share/icons/hicolor/256x256/apps/$APP_FILE_BASENAME.$ICON_EXTENSION"
            fi
            echo "Icon copied from $ICON_SOURCE_PATH."
          else
            echo "Warning: Icon file not found at '$ICON_SOURCE_PATH'. Creating a dummy icon."
            convert -size 256x256 xc:dodgerblue -pointsize 20 -fill white -gravity center -draw "text 0,0 '$PUBSPEC_APP_NAME'" "$APPDIR_NAME/$APP_FILE_BASENAME.png"
            mkdir -p "$APPDIR_NAME/usr/share/icons/hicolor/256x256/apps"
            cp "$APPDIR_NAME/$APP_FILE_BASENAME.png" "$APPDIR_NAME/usr/share/icons/hicolor/256x256/apps/$APP_FILE_BASENAME.png"
          fi
          
          ln -sf "$APP_EXECUTABLE_IN_BUNDLE" "$APPDIR_NAME/AppRun"
          chmod +x "$APPDIR_NAME/AppRun"
          
          echo "appdir_path=$(pwd)/$APPDIR_NAME" >> $GITHUB_OUTPUT
          echo "app_file_basename=$APP_FILE_BASENAME" >> $GITHUB_OUTPUT
          echo "appimage_arch_label=${{ matrix.appimage_tool_arch }}" >> $GITHUB_OUTPUT

      - name: Download AppImageTool (${{ matrix.arch_name }})
        run: |
          wget -q "https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-${{ matrix.appimage_tool_arch }}.AppImage" -O appimagetool.AppImage
          chmod +x appimagetool.AppImage

      - name: Build AppImage (${{ matrix.arch_name }})
        id: build_appimage
        run: |
          APPDIR_PATH="${{ steps.prepare_appdir.outputs.appdir_path }}"
          APP_FILE_BASENAME="${{ steps.prepare_appdir.outputs.app_file_basename }}"
          APPIMAGE_ARCH_LABEL_FOR_TOOL="${{ steps.prepare_appdir.outputs.appimage_arch_label }}" # e.g. x86_64 or aarch64

          # AppImage filename format: appname-version-arch.AppImage
          APPIMAGE_FILENAME="${APP_FILE_BASENAME}-${APP_VERSION}-${APPIMAGE_ARCH_LABEL_FOR_TOOL}.AppImage"
          
          # Set ARCH env var as appimagetool might use it
          ARCH="$APPIMAGE_ARCH_LABEL_FOR_TOOL" ./appimagetool.AppImage "$APPDIR_PATH" "$APPIMAGE_FILENAME"

          echo "AppImage created: $APPIMAGE_FILENAME"
          ls -lh "$APPIMAGE_FILENAME"
          
          FINAL_APPIMAGE_DIR="dist_appimages"
          mkdir -p "$FINAL_APPIMAGE_DIR"
          mv "$APPIMAGE_FILENAME" "$FINAL_APPIMAGE_DIR/"
          
          ABSOLUTE_APPIMAGE_PATH="$(pwd)/$FINAL_APPIMAGE_DIR/$APPIMAGE_FILENAME"
          echo "appimage_path=$ABSOLUTE_APPIMAGE_PATH" >> $GITHUB_OUTPUT
          echo "appimage_upload_name=fitflutterfluent-appimage-linux-${{ matrix.arch_name }}" >> $GITHUB_OUTPUT
          echo "appimage_filename_for_release=$APPIMAGE_FILENAME" >> $GITHUB_OUTPUT # Exact filename for release step

      - name: Upload Linux AppImage Artifact (${{ matrix.arch_name }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_appimage.outputs.appimage_upload_name }}
          path: ${{ steps.build_appimage.outputs.appimage_path }}


  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: resolve-version
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.32.0
      - run: flutter pub get
      - name: Flutter Build Android
        run: |
          flutter build apk --release --build-name=${{ needs.resolve-version.outputs.app_version }}
      - name: Rename Android APK
        run: |
          mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/fitflutterfluent-android-${{ needs.resolve-version.outputs.app_version }}.apk
          echo "Renamed APK to fitflutterfluent-android-${{ needs.resolve-version.outputs.app_version }}.apk"
      - name: Upload Android Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fitflutterfluent-android 
          path: build/app/outputs/flutter-apk/fitflutterfluent-android-${{ needs.resolve-version.outputs.app_version }}.apk

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [resolve-version, build-windows, innosetup, build-linux, build-android]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded files
        run: |
          echo "--- Listing root of workspace ---"
          ls -lA
          echo "--- Listing contents of downloaded artifact directories ---"
          for dir in *; do
            if [ -d "$dir" ]; then
              echo "--- Contents of $dir ---"
              ls -lA "$dir/"
            fi
          done
        shell: bash

      - name: Zip Windows unpacked build
        run: |
          WINDOWS_UNPACKED_ZIP_NAME="fitflutterfluent-windows-${{ needs.resolve-version.outputs.app_version }}.zip"
          if [ -d "fitflutterfluent-windows-unpacked" ]; then
            echo "Zipping contents of fitflutterfluent-windows-unpacked into $WINDOWS_UNPACKED_ZIP_NAME"
            cd fitflutterfluent-windows-unpacked
            zip -r ../${WINDOWS_UNPACKED_ZIP_NAME} .
            cd ..
            echo "Created ${WINDOWS_UNPACKED_ZIP_NAME}"
          else
            echo "Warning: fitflutterfluent-windows-unpacked directory not found. Skipping zip."
          fi
          ls -l

      - name: Prepare Release Assets
        id: prepare_release_assets
        env:
          APP_VERSION: ${{ needs.resolve-version.outputs.app_version }}
        run: |
          # It's more robust to find files based on expected artifact directory structure
          # and known parts of filenames rather than reconstructing full names,
          # especially if pubspec.yaml isn't checked out here.

          FILE_LIST=""
          
          # Windows
          if [ -f "fitflutterfluent-windows-${APP_VERSION}.zip" ]; then
            FILE_LIST+="fitflutterfluent-windows-${APP_VERSION}.zip\n"
          fi
          if [ -f "fitflutterfluent-windows-setup/fit-flutter-setup-win64-${APP_VERSION}.exe" ]; then
            FILE_LIST+="fitflutterfluent-windows-setup/fit-flutter-setup-win64-${APP_VERSION}.exe\n"
          fi

          # Linux Tarballs - using find to be more flexible with exact names if needed
          find fitflutterfluent-linux-tarball-x64 -name "fitflutterfluent-linux-x64-${APP_VERSION}.tar.gz" -print0 2>/dev/null | xargs -0 -I {} printf "%s\n" "{}" >> temp_file_list.txt
          find fitflutterfluent-linux-tarball-arm64 -name "fitflutterfluent-linux-arm64-${APP_VERSION}.tar.gz" -print0 2>/dev/null | xargs -0 -I {} printf "%s\n" "{}" >> temp_file_list.txt
          
          # Linux AppImages - using find
          # The AppImage filenames are like: {app_file_basename}-{APP_VERSION}-{arch_label}.AppImage
          # Example: fit-flutter-fluent-1.0.0-x86_64.AppImage
          # We'll use a wildcard for the app_file_basename part if we don't want to hardcode "fit-flutter-fluent"
          find fitflutterfluent-appimage-linux-x64 -name "*-${APP_VERSION}-x86_64.AppImage" -print0 2>/dev/null | xargs -0 -I {} printf "%s\n" "{}" >> temp_file_list.txt
          find fitflutterfluent-appimage-linux-arm64 -name "*-${APP_VERSION}-aarch64.AppImage" -print0 2>/dev/null | xargs -0 -I {} printf "%s\n" "{}" >> temp_file_list.txt
          
          # Android
          if [ -f "fitflutterfluent-android/fitflutterfluent-android-${APP_VERSION}.apk" ]; then
            cat <<< "fitflutterfluent-android/fitflutterfluent-android-${APP_VERSION}.apk" >> temp_file_list.txt
          fi
          
          # Consolidate list
          if [ -f temp_file_list.txt ]; then
            FILE_LIST+=$(cat temp_file_list.txt)
          fi

          echo "Collected files for release:"
          echo -e "$FILE_LIST"
          echo "assets<<EOF" >> $GITHUB_OUTPUT
          echo -e "$FILE_LIST" | sed '/^\s*$/d' >> $GITHUB_OUTPUT # Remove empty lines
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash


      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', needs.resolve-version.outputs.app_version) }}
          name: Release ${{ needs.resolve-version.outputs.app_version }}
          draft: true
          generate_release_notes: true
          files: ${{ steps.prepare_release_assets.outputs.assets }}