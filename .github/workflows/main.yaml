name: Build FitFlutterFluent Releases

on:
  push:
    tags:
      - 'v*.*.*' # e.g. v1.0.0
      - '*.*.*'  # e.g. 1.0.0 (tags without 'v' prefix)
  workflow_dispatch:
    inputs:
      version:
        description: 'Manual version (e.g., 1.2.3). If empty and not a tag, uses pubspec.yaml.'
        required: false
        default: ''

jobs:
  resolve-version:
    name: Resolve Application Version
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.determine_version.outputs.version_number }}
      build_number: ${{ steps.determine_version.outputs.build_suffix }} # Or a fixed build number
    steps:
      - uses: actions/checkout@v4

      - name: Determine Version and Build Number
        id: determine_version
        run: |
          VERSION_NUMBER=""
          BUILD_SUFFIX="1" # Default build number/suffix

          # Determine source of version (tag, input, or pubspec)
          SOURCE_VERSION_STRING=""
          if [[ "${{ github.event_name }}" == "push" && "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            TAG_NAME="${{ github.ref_name }}"
            SOURCE_VERSION_STRING="${TAG_NAME#v}" # Remove 'v' prefix if it exists
            echo "Using version from tag: $TAG_NAME"
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            SOURCE_VERSION_STRING="${{ github.event.inputs.version }}"
            echo "Using version from manual input: $SOURCE_VERSION_STRING"
          else
            echo "Reading version from pubspec.yaml"
            SOURCE_VERSION_STRING=$(grep '^version: ' pubspec.yaml | sed 's/version: //')
            # Remove any leading/trailing whitespace from pubspec version just in case
            SOURCE_VERSION_STRING=$(echo "$SOURCE_VERSION_STRING" | xargs) 
            echo "Using version from pubspec.yaml: $SOURCE_VERSION_STRING"
          fi

          # Parse VERSION_NUMBER and BUILD_SUFFIX from SOURCE_VERSION_STRING
          if [[ "$SOURCE_VERSION_STRING" == *"+"* ]]; then
            PROVISIONAL_BUILD_SUFFIX="${SOURCE_VERSION_STRING#*+}"
            # Trim whitespace from provisional build suffix
            PROVISIONAL_BUILD_SUFFIX=$(echo "$PROVISIONAL_BUILD_SUFFIX" | xargs)
            if [[ -n "$PROVISIONAL_BUILD_SUFFIX" ]]; then # Only override default if something was after +
                BUILD_SUFFIX="$PROVISIONAL_BUILD_SUFFIX"
            fi
            VERSION_NUMBER="${SOURCE_VERSION_STRING%+*}"
          else
            VERSION_NUMBER="$SOURCE_VERSION_STRING"
            # BUILD_SUFFIX remains its default value of "1"
          fi
          
          # Trim whitespace from VERSION_NUMBER as well
          VERSION_NUMBER=$(echo "$VERSION_NUMBER" | xargs)

          # Validate VERSION_NUMBER
          if [[ -z "$VERSION_NUMBER" ]]; then
            echo "Error: Version number (app_version) could not be determined or is empty."
            exit 1
          fi
          # Basic format check for version number (e.g., X.Y.Z)
          if ! [[ "$VERSION_NUMBER" =~ ^[0-9]+\.[0-9]+\.[0-9]+([._-].+)?$ ]]; then
            # Allow suffixes like -beta, .alpha for version_number itself if not part of build_suffix
            if ! [[ "$VERSION_NUMBER" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "Warning: VERSION_NUMBER ('$VERSION_NUMBER') doesn't strictly follow X.Y.Z. Ensure it's compatible with build tools."
            fi
          fi

          # Validate and finalize BUILD_SUFFIX (must be a positive integer for Android versionCode)
          if ! [[ "$BUILD_SUFFIX" =~ ^[1-9][0-9]*$ ]]; then
            echo "Warning: BUILD_SUFFIX ('$BUILD_SUFFIX') was empty, zero, non-numeric, or not a positive integer. Defaulting to 1."
            BUILD_SUFFIX="1"
          fi

          echo "Determined app_version: $VERSION_NUMBER"
          echo "Determined build_suffix (build_number): $BUILD_SUFFIX"

          echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT
          echo "build_suffix=$BUILD_SUFFIX" >> $GITHUB_OUTPUT

  build-windows:
    name: Build Windows Release
    runs-on: windows-latest
    needs: resolve-version
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
      - run: flutter pub get
      - name: Flutter Build Windows
        run: |
          flutter build windows --release --build-name=${{ needs.resolve-version.outputs.app_version }} 
          # You might want to re-add --build-number here:
          # flutter build windows --release --build-name=${{ needs.resolve-version.outputs.app_version }} --build-number=${{ needs.resolve-version.outputs.build_suffix }}
          echo "Built with version: ${{ needs.resolve-version.outputs.app_version }}+${{ needs.resolve-version.outputs.build_suffix }}"
      - name: Prepare Windows Artifact
        run: |
          mkdir dist
          # Corrected path:
          cp -r build/windows/x64/runner/Release dist/fitflutterfluent 
          # For PowerShell, Copy-Item is more idiomatic:
          # New-Item -ItemType Directory -Force -Path dist
          # Copy-Item -Path build/windows/x64/runner/Release/* -Destination dist/fitflutterfluent -Recurse -Force
        # shell: powershell # If using Copy-Item
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fitflutterfluent-windows-unpacked
          path: dist/fitflutterfluent

  innosetup:
    name: Build Inno Setup Installer
    runs-on: windows-latest
    needs: [build-windows, resolve-version]
    env:
      APP_VERSION: ${{ needs.resolve-version.outputs.app_version }}
    steps:
      - uses: actions/checkout@v4 # Checks out the repo (for .iss script, MediaPlayer.dll, MyMusic.mp3 etc.)

      - name: Download Windows Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: fitflutterfluent-windows-unpacked # Name of the artifact uploaded in build-windows
          path: build/windows/x64/runner/Release  # Flutter's typical output path, files go here directly

      - name: Prepare Additional Files for Inno Setup
        run: |
          # The main app files are already in build/windows/x64/runner/Release due to download-artifact.
          # We only need to ensure other files (MediaPlayer.dll, MyMusic.mp3) are where .iss expects them.
          # Assuming your .iss script uses paths relative to the repo root for these, like 'setup/MediaPlayer.dll'
          
          # Ensure the 'setup' directory exists if your .iss refers to it.
          # If MediaPlayer.dll and MyMusic.mp3 are already in your repo at paths like
          # '.github/workflows/MediaPlayer.dll', and your .iss script refers to them as
          # Source: ".github\workflows\MediaPlayer.dll" then you might not need to copy them at all,
          # as actions/checkout@v4 already brought them.

          # If your .iss script expects them in a 'setup' folder at the root:
          mkdir -p setup 
          # Make sure these source paths for cp are correct relative to your repo structure
          # For example, if they are stored alongside the workflow file:
          cp .github/workflows/MediaPlayer.dll setup/MediaPlayer.dll 
          cp .github/workflows/MyMusic.mp3 setup/MyMusic.mp3     
          
          # If they are already in a 'setup' folder in your repo, and .iss refers to 'setup\MediaPlayer.dll',
          # then no 'cp' commands are needed here for these files.

          echo "Listing contents of expected Inno Setup source directory:"
          ls -R build/windows/x64/runner/Release # Verify app files are here
          echo "Listing contents of setup directory (if used):"
          ls -R setup # Verify helper files are here
        shell: bash # Using bash for mkdir -p and ls

      - name: Install Inno Setup
        run: |
          choco install innosetup --no-progress
      - name: Build Installer
        run: |
          # Ensure your .iss script uses relative paths, e.g.:
          # [Files]
          # Source: "build\windows\x64\runner\Release\{#MyAppExeName}"; DestDir: "{app}"
          # Source: "build\windows\x64\runner\Release\flutter_windows.dll"; DestDir: "{app}"
          # ... etc for all files from the build output
          # Source: "setup\MediaPlayer.dll"; Flags: dontcopy 
          # Source: "setup\MyMusic.mp3"; Flags: dontcopy 
          #
          # OutputDir in .iss should be relative, e.g., OutputDir=Output
          iscc /DMyAppVersion="${{ env.APP_VERSION }}" .github/workflows/setupmaker.iss
      - name: List Installer Output
        run: ls -R Output # Check what was generated
        shell: bash
      - name: Upload InnoSetup Installer
        uses: actions/upload-artifact@v4
        with:
          name: fitflutterfluent-windows-setup
          path: Output/fit-flutter-setup-win64-${{ env.APP_VERSION }}.exe

  build-linux:
    name: Build Linux Release
    runs-on: ubuntu-latest
    needs: resolve-version
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
      - run: sudo apt-get update
      - run: sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev
      - run: flutter pub get
      - name: Flutter Build Linux
        run: |
          flutter build linux --release --build-name=${{ needs.resolve-version.outputs.app_version }} 
      - name: Prepare Linux Artifact
        run: |
          mkdir -p dist/fitflutterfluent
          cp -r build/linux/x64/release/bundle/* dist/fitflutterfluent/
          cd dist && tar -czf fitflutterfluent-linux-${{ needs.resolve-version.outputs.app_version }}.tar.gz fitflutterfluent
      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fitflutterfluent-linux
          path: dist/fitflutterfluent-linux-${{ needs.resolve-version.outputs.app_version }}.tar.gz

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: resolve-version
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
      - run: flutter pub get
      - name: Flutter Build Android
        run: |
          flutter build apk --release --build-name=${{ needs.resolve-version.outputs.app_version }}
      - name: Upload Android Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fitflutterfluent-android
          path: build/app/outputs/flutter-apk/app-release.apk # Name will be generic, content has version

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [resolve-version, build-windows, innosetup, build-linux, build-android]
    # Only run for tags or manual dispatch (if you want releases for manual runs too)
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4 # Downloads all artifacts to current dir
        # Artifacts will be in subdirectories named after the artifact name

      - name: List downloaded files # For debugging
        run: ls -R

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          # github.ref_name will be the tag name (e.g., v1.0.0 or 1.0.0)
          # If workflow_dispatch, github.ref_name is the branch, so use resolved version for release name
          tag_name: ${{ github.ref_name }} # Use actual tag for tag-based releases
          name: Release ${{ needs.resolve-version.outputs.app_version }}
          draft: true # Set to false to publish immediately
          files: |
            fitflutterfluent-windows-unpacked/**
            fitflutterfluent-windows-setup/fit-flutter-setup-win64-${{ needs.resolve-version.outputs.app_version }}.exe
            fitflutterfluent-linux/fitflutterfluent-linux-${{ needs.resolve-version.outputs.app_version }}.tar.gz
            fitflutterfluent-android/app-release.apk