; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "FitFlutterFluent"
#define MyAppVersion "0.0.1"
#define MyAppPublisher "THR3ATB3AR"
#define MyAppURL "https://github.com/THR3ATB3AR/fit_flutter_fluent"
#define MyAppExeName "fit_flutter_fluent.exe"

[Setup]
AppId={{9799393C-FC59-4248-81BC-1F99BA1A1EAA}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
UninstallDisplayIcon={app}\{#MyAppExeName}
ArchitecturesAllowed=x64compatible
ArchitecturesInstallIn64BitMode=x64compatible
DisableProgramGroupPage=yes
PrivilegesRequiredOverridesAllowed=commandline
OutputDir=Output
OutputBaseFilename=fit-flutter-setup-win64-{#MyAppVersion}
SetupIconFile=setup\ffsetuplogo.ico
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "build\windows\x64\runner\Release\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion

Source: "setup\MediaPlayer.dll"; Flags: dontcopy
Source: "setup\MyMusic.mp3"; Flags: dontcopy

Source: "build\windows\x64\runner\Release\flutter_acrylic_plugin.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "build\windows\x64\runner\Release\flutter_windows.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "build\windows\x64\runner\Release\permission_handler_windows_plugin.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "build\windows\x64\runner\Release\screen_retriever_windows_plugin.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "build\windows\x64\runner\Release\sqlite3.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "build\windows\x64\runner\Release\sqlite3_flutter_libs_plugin.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "build\windows\x64\runner\Release\system_theme_plugin.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "build\windows\x64\runner\Release\url_launcher_windows_plugin.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "build\windows\x64\runner\Release\window_manager_plugin.dll"; DestDir: "{app}"; Flags: ignoreversion

Source: "build\windows\x64\runner\Release\data\*"; DestDir: "{app}\data"; Flags: ignoreversion recursesubdirs createallsubdirs


[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall

[Code]
const
  EC_COMPLETE = $01; // Event code for playback completion

  // --- Volume Constants (Adjust these if your MediaPlayer.dll uses a different range) ---
  PlayingVolumeLevel = 0;     // Example: Full volume (common for DirectShow: 0)
  MuteVolumeLevel = -10000; // Example: Silence (common for DirectShow: -10000)
  // --- End Volume Constants ---

// Type definition for the event callback procedure
type
  TDirectShowEventProc = procedure(EventCode, Param1, Param2: Integer);

// External function declarations from MediaPlayer.dll
function DSInitializeAudioFile(FileName: WideString; CallbackProc: TDirectShowEventProc): Boolean;
  external 'DSInitializeAudioFile@files:MediaPlayer.dll stdcall';
function DSPlayMediaFile: Boolean;
  external 'DSPlayMediaFile@files:MediaPlayer.dll stdcall';
function DSStopMediaPlay: Boolean;
  external 'DSStopMediaPlay@files:MediaPlayer.dll stdcall';
function DSPauseMediaPlay: Boolean; // For "logical" pausing
  external 'DSPauseMediaPlay@files:MediaPlayer.dll stdcall';
function DSSetVolume(Value: Longint): Boolean; // For volume control (mute/unmute)
  external 'DSSetVolume@files:MediaPlayer.dll stdcall';

var
  MusicPlaying: Boolean; // Tracks if music stream was successfully started and hasn't ended/been stopped
  MusicPaused: Boolean;  // Tracks our logical "paused" state (which now includes mute)
  PauseResumeButton: TButton;

// Helper for logging boolean values
function BooleanToString(B: Boolean; UseTrueFalse: Boolean): String;
begin
  if UseTrueFalse then
  begin
    if B then Result := 'True' else Result := 'False';
  end
  else
  begin
    if B then Result := '1' else Result := '0';
  end;
end;

// Callback procedure for media player events
procedure OnMediaPlayerEvent(EventCode, Param1, Param2: Integer);
begin
  Log(Format('OnMediaPlayerEvent - Code: %d, Param1: %d, Param2: %d', [EventCode, Param1, Param2]));
  if EventCode = EC_COMPLETE then
  begin
    Log('Music playback completed.');
    MusicPlaying := False;
    MusicPaused := False;
    if Assigned(PauseResumeButton) then
    begin
      PauseResumeButton.Caption := 'Music Ended';
      PauseResumeButton.Enabled := False;
    end;
  end;
end;

// Event handler for the Pause/Resume (Mute/Unmute) button
procedure PauseResumeButtonClick(Sender: TObject);
var
  VolumeResult: Boolean;
begin
  Log(Format('PauseResumeButtonClick called. MusicPaused (current state): %s, MusicPlaying (stream active): %s', [BooleanToString(MusicPaused, True), BooleanToString(MusicPlaying, True)]));

  if not MusicPlaying then
  begin
    Log('PauseResumeButtonClick: Music stream is not active (MusicPlaying is False). Aborting action.');
    Exit;
  end;

  if MusicPaused then // Currently "paused" (muted), so we want to "resume" (unmute and play)
  begin
    Log('Attempting to "resume" music (unmute and call DSPlayMediaFile)...');
    // Step 1: Try to "resume" the player (might be a no-op or state change in DLL)
    if DSPlayMediaFile then
    begin
      Log('DSPlayMediaFile successful for resume.');
      // Step 2: Unmute the music
      Log(Format('Setting volume to PlayingVolumeLevel: %d', [PlayingVolumeLevel]));
      VolumeResult := DSSetVolume(PlayingVolumeLevel);
      if VolumeResult then
        Log('DSSetVolume (unmute) successful.')
      else
        Log('DSSetVolume (unmute) FAILED.');

      MusicPaused := False; // No longer in our logical "paused" (muted) state
      if Assigned(PauseResumeButton) then PauseResumeButton.Caption := 'Pause Music';
    end
    else
    begin
      Log('DSPlayMediaFile FAILED for resume.');
      MsgBox('Could not resume music playback. DSPlayMediaFile failed.', mbError, MB_OK);
      // Music remains in "paused" (muted) state if DSPlayMediaFile fails
    end;
  end
  else // Music is playing (MusicPlaying is True and MusicPaused is False), so we want to "pause" (mute)
  begin
    Log('Attempting to "pause" music (mute and call DSPauseMediaPlay)...');
    // Step 1: Try to "pause" the player (might be a no-op or state change in DLL)
    if DSPauseMediaPlay then // This call might return true but not audibly pause
    begin
      Log('DSPauseMediaPlay successful (returned true).');
      // Step 2: Mute the music
      Log(Format('Setting volume to MuteVolumeLevel: %d', [MuteVolumeLevel]));
      VolumeResult := DSSetVolume(MuteVolumeLevel);
      if VolumeResult then
        Log('DSSetVolume (mute) successful.')
      else
        Log('DSSetVolume (mute) FAILED.');
        // Optionally inform user if mute itself failed:
        // MsgBox('Could not set volume to mute. DSSetVolume failed.', mbWarning, MB_OK);


      MusicPaused := True; // Now in our logical "paused" (muted) state
      if Assigned(PauseResumeButton) then PauseResumeButton.Caption := 'Resume Music';
    end
    else
    begin
      Log('DSPauseMediaPlay FAILED.');
      MsgBox('Could not pause music. DSPauseMediaPlay function failed.', mbError, MB_OK);
      // If DSPauseMediaPlay fails, we don't proceed to mute or change state.
    end;
  end;
  Log(Format('PauseResumeButtonClick finished. MusicPaused (new state): %s, MusicPlaying (stream active): %s, Button Caption: %s', [BooleanToString(MusicPaused, True), BooleanToString(MusicPlaying, True), PauseResumeButton.Caption]));
end;

procedure InitializeWizard;
var
  MusicFile: String;
begin
  Log('InitializeWizard started.');
  MusicPlaying := False;
  MusicPaused := False;

  PauseResumeButton := TButton.Create(WizardForm);
  PauseResumeButton.Parent := WizardForm;
  PauseResumeButton.Width := ScaleX(110); // You can adjust width as needed

  // --- Modified Positioning ---
  // Use WizardForm.NextButton as the reference for vertical alignment and height.
  // WizardForm.NextButton becomes the "Install" button on the wpReady page
  // and the "Finish" button on the wpFinished page.
  PauseResumeButton.Height := WizardForm.NextButton.Height;
  PauseResumeButton.Top := WizardForm.NextButton.Top;

  // Position it horizontally to the left of the Next/Install button.
  PauseResumeButton.Left := WizardForm.NextButton.Left - PauseResumeButton.Width - ScaleX(8);
  // --- End Modified Positioning ---

  PauseResumeButton.Caption := 'Pause Music';
  PauseResumeButton.OnClick := @PauseResumeButtonClick;
  PauseResumeButton.Enabled := False; // Initially disabled
  PauseResumeButton.Visible := True;  // Make it visible

  ExtractTemporaryFile('MyMusic.mp3');
  MusicFile := ExpandConstant('{tmp}\MyMusic.mp3');
  Log(Format('Music file extracted to: %s', [MusicFile]));

  Log('Attempting to initialize audio file...');
  if DSInitializeAudioFile(MusicFile, @OnMediaPlayerEvent) then
  begin
    Log('DSInitializeAudioFile successful.');

    Log(Format('Setting initial volume to PlayingVolumeLevel: %d', [PlayingVolumeLevel]));
    if DSSetVolume(PlayingVolumeLevel) then
      Log('Initial DSSetVolume successful.')
    else
      Log('Initial DSSetVolume FAILED. Music might be muted or at an unexpected level.');

    Log('Attempting to play media file...');
    if DSPlayMediaFile then
    begin
      Log('DSPlayMediaFile successful. Music should be playing at normal volume.');
      MusicPlaying := True;
      if Assigned(PauseResumeButton) then
      begin
        PauseResumeButton.Enabled := True;
        PauseResumeButton.Caption := 'Pause Music';
      end;
    end
    else
    begin
      Log('DSPlayMediaFile FAILED when starting music.');
      MsgBox('Could not play music.', mbError, MB_OK);
      if Assigned(PauseResumeButton) then PauseResumeButton.Caption := 'Play Error';
    end;
  end
  else
  begin
    Log('DSInitializeAudioFile FAILED.');
    MsgBox('Could not initialize music file.', mbError, MB_OK);
    if Assigned(PauseResumeButton) then PauseResumeButton.Caption := 'Init Error';
  end;
  Log('InitializeWizard finished.');
end;